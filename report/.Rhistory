g2 <- ggplot(data = df_wk) + geom_histogram(aes(x=scaled_stream)) + theme_minimal()
g3 <- ggplot(data = df_wk) + geom_histogram(aes(x=scaled_likes)) + theme_minimal()
g4 <- ggplot(data = df_wk) + geom_histogram(aes(x=scaled_comments)) + theme_minimal()
grid.arrange(g1, g2, g3, g4, ncol = 2)
## It looks like we have an outlier at 0 that must be investigated and some mild outliers with have a 200 - 250 range which they look okay
ggplot(data = df_wk) + geom_boxplot(aes(x=Tempo)) + theme_minimal()
## Delete songs with Noise in the track and Tempo < 15 and in the channel White Noise - Topic
cond_Noise <- (df_wk$Track %>% stringr::str_match("Noise") %>% is.na()==FALSE)
cond_tempo <- (df_wk$Tempo <15)
df_wk <- df_wk[which((cond_Noise & cond_tempo)==FALSE),]
df_wk <- df_wk[(df_wk$Channel != 'White Noise - Topic') | is.na(df_wk$Channel),]
## We impute missings for the rest
df_wk$Tempo <- ifelse(df_wk$Tempo <15, NA, df_wk$Tempo)
## We have outliers of songs which last very long duration and some with a short duration capping might be a good solution
ggplot(data = df_wk) + geom_boxplot(aes(x=Duration_ms)) + theme_minimal()
df_wk[df_wk$Duration_ms > 1e6,] ## Seems that are properly created and fit the objective of the analysis so we won't change them
df_wk$Duration_ms %>% min(na.rm = TRUE) ## We will consider this a valid Duration so all the above too
## We have outliers of songs with low DB
ggplot(data = df_wk) + geom_boxplot(aes(x=Loudness)) + theme_minimal()
df_wk[df_wk$Loudness < -40,] %>% drop_na()  ## Classical music seems to be the cause. Will keep it as it is.
ggplot(df_wk, aes(x = Artist)) +
geom_bar() +
labs(title = "Count of Categorical Values", x = "Artist", y = "Count")
## All Artist are represented 10 times.
df_wk$Artist %>% unique %>% length()
## Convert numeric those variables that have a clearly not-normal distribution
df_wk$instrumental_band <-  cut(df_wk$Instrumentalness, breaks = c(-1,0.00001, 0.25,0.5, Inf), labels = c("Zero", "Low","Medium","High"))
df_wk$speech_band <-  cut(df_wk$Speechiness, breaks = c(-1,0.00001, 0.25,0.5, Inf), labels = c("Zero", "Low","Medium","High"))
df_wk$Key <- df_wk$Key %>% as.factor()
## Normalization of youtube related columns
## 1. Convert both official_video and Licensed to factor and encode its NA's to "NO_VIDEO"
## 2. Similarly, NA's of Title and Channel columns also encoded to "NO_VIDEO"
df_wk <- df_wk %>%
mutate(
official_video = factor(
case_when(
is.na(official_video) ~ "NO_VIDEO",
official_video == TRUE ~ "OFFICIAL",
official_video == FALSE ~ "NON_OFFICIAL"
),
levels = c("OFFICIAL", "NON_OFFICIAL", "NO_VIDEO")
),
Licensed = factor(
case_when(
is.na(Licensed) ~ "NO_VIDEO",
Licensed == TRUE ~ "LICENSED",
Licensed == FALSE ~ "UNLICENSED"
),
levels = c("LICENSED", "UNLICENSED", "NO_VIDEO")
),
Title = ifelse(is.na(Title), "NO_VIDEO", Title),
Channel = ifelse(is.na(Channel), "NO_VIDEO", Channel),
)
df_wk %>% apply(2, is.na) %>% apply(2, sum)
df_wk_impute <- df_wk %>% select(!c("Artist","Track","Album","Title","Channel"))
df_wk_impute <- mice(df_wk_impute, method="cart", m=1) ## We use CART method as it gives no problem for Computationally singular errors.
library(tidyverse); library(stringr);library(ggplot2);library(gridExtra):library(mice)
df_wk_impute <- mice(df_wk_impute, method="cart", m=1) ## We use CART method as it gives no problem for Computationally singular errors.
df_wk_impute <- mice::complete(df_wk_impute)
add_df_wk <- df_wk %>% select(c("Artist","Track","Album","Title","Channel"))
df_wk_i <- cbind(add_df_wk, df_wk_impute)
df_wk_i
df_wk_i %>% apply(2,is.na) %>% apply(2,sum)
df_wk_i$scaled_comments <- ifelse(is.na(df_wk_i$scaled_comments), 0, df_wk_i$scaled_comments) # We will impute log(0) values as 0.
df_wk_i$scaled_likes <- ifelse(is.na(df_wk_i$scaled_likes), 0, df_wk_i$scaled_likes) # We will impute log(0) values as 0.
df_wk_i$scaled_views <- ifelse(is.na(df_wk_i$scaled_views), 0, df_wk_i$scaled_views) # We will impute log(0) values as 0.
df_wk_i %>% apply(2,is.na) %>% apply(2,sum)
df %>% glimpse
df_wk_i %>% select("Danceability","Energy","Key","Loudness","Speechiness","Acousticness","InstrumentalnessLiveness","Valence","Tempo","Duration_ms""ViewsLikesCommentsStream")
df_wk_i %>% select("Danceability","Energy","Key","Loudness","Speechiness","Acousticness","InstrumentalnessLiveness","Valence","Tempo","Duration_ms","Views", "Likes","Comments","Stream")
df_wk_i
df_wk_i %>% select("Danceability","Energy","Key","Loudness","Speechiness","Acousticness","Instrumentalness", "Liveness","Valence","Tempo","Duration_ms","Views", "Likes","Comments","Stream")
df_wk_i %>% select("Danceability","Energy","Key","Loudness","Speechiness","Acousticness","Instrumentalness", "Liveness","Valence","Tempo","Duration_ms","Views", "Likes","Comments","Stream")
df_wk_idf_wk_i %>% select("Danceability","Energy","Loudness","Acousticness", "Liveness","Valence","Tempo","Duration_ms","Views", "Likes","Comments","Stream")
df_wk_i %>% select("Danceability","Energy","Loudness","Acousticness", "Liveness","Valence","Tempo","Duration_ms","Views", "Likes","Comments","Stream")
df_wk_i_numeric <- df_wk_i %>% select("Danceability","Energy","Loudness","Acousticness", "Liveness","Valence","Tempo","Duration_ms","Views", "Likes","Comments","Stream")
Moutlier(df_wk_i_numeric)
chemometrics::Moutlier(df_wk_i_numeric)
chemometrics::Moutlier(df_wk_i_numeric)
saveRDS(df_wk_i)
saveRDS(df_wk_i, file = "preprocessing.Rdata")
knitr::opts_chunk$set(echo = TRUE)
readRDS("../preprocessing.Rdata")
create_report(df_wk_i)
library(DataExplorer)
preprocessing.Rdata
readRDS("../preprocessing.Rdata")
readRDS("../preprocessing.Rdata")
create_report(df_wk_i)
df_wk_i
df_wk_i %>% apply(2, is.na) %>% apply(2, sum )
create_report(df_wk_i)
create_report(na.omit(df_wk_i))
?create_report
add_plot_prcomp = FALSE)
create_report(df_wk_i,   config = configure_report(add_plot_prcomp = FALSE)
create_report(df_wk_i,   config = configure_report(add_plot_prcomp = FALSE))
create_report(df_wk_i,   config = configure_report(add_plot_prcomp = FALSE))
View(df_wk_i)
readRDS("../preprocessing.Rdata")
df_wk_i <- readRDS("../preprocessing.Rdata")
create_report(df_wk_i,   config = configure_report(add_plot_prcomp = FALSE))
df_wk_i <- readRDS("../preprocessing.Rdata")
setwd("C:/MDS/MVA/Project/report/")
df_wk_i <- readRDS("../preprocessing.Rdata")
#get numerical variables (with no missing values)
numeriques<-which(sapply(df_wk_i,is.numeric))
numeriques
df_wk_num
setwd("C:/MDS/MVA/Project/report/")
df_wk_i <- readRDS("../preprocessing.Rdata")
#get numerical variables (with no missing values)
numeriques<-which(sapply(df_wk_i,is.numeric))
numeriques
df_wk_num<-df_wk_i[,numeriques]
sapply(df_wk_num,class)
#remove scaled, because they have infinite values
df_wk_num
df_wk_num$scaled_likes
df_wk_num$scaled_likes %>% summary
df_wk_num[df_wk_num$scaled_likes > 17.74]
df_wk_num[df_wk_num$scaled_likes > 17.74,]
df_wk_num
df_wk_num$scaled_likes %>% summary
View(df_wk_num)
df_wk_num$scaled_likes
df_wk_num$scaled_likes==Inf
df_wk_num[df_wk_num$scaled_likes==Inf,]
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Views", "Stream", "Likes", "Comments"))]
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_nun)
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Views", "Stream", "Likes", "Comments"))]
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_nun)
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num)
df_wk_num %>% apply(2, is.na) %>% apply(2, sum)
df_wk_num %>% apply(2, is.infinite) %>% apply(2, sum)
df_wk_num[df_wk_num$scaled_comments %>% is.infinite,]
df_wk_i$scaled_views <- ifelse(df_wk_i$scaled_views %>% is.inifinite, 0, df_wk_i$scaled_views)
df_wk_i$scaled_likes <- ifelse(df_wk_i$scaled_likes %>% is.inifinite, 0, df_wk_i$scaled_likes)
df_wk_i$scaled_views <- ifelse(df_wk_i$scaled_views %>% is.infinite, 0, df_wk_i$scaled_views)
df_wk_i$scaled_likes <- ifelse(df_wk_i$scaled_likes %>% is.infinite, 0, df_wk_i$scaled_likes)
df_wk_i$scaled_comments <- ifelse(df_wk_i$scaled_comments %>% is.infinite, 0, df_wk_i$scaled_comments)
df_wk_i$scaled_stream <- ifelse(df_wk_i$scaled_stream %>% is.infinite, 0, df_wk_i$scaled_stream)
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num)
setwd("C:/MDS/MVA/Project/report/")
df_wk_i <- readRDS("../preprocessing.Rdata")
df_wk_i$scaled_views <- ifelse(df_wk_i$scaled_views %>% is.infinite, 0, df_wk_i$scaled_views)
df_wk_i$scaled_likes <- ifelse(df_wk_i$scaled_likes %>% is.infinite, 0, df_wk_i$scaled_likes)
df_wk_i$scaled_comments <- ifelse(df_wk_i$scaled_comments %>% is.infinite, 0, df_wk_i$scaled_comments)
df_wk_i$scaled_stream <- ifelse(df_wk_i$scaled_stream %>% is.infinite, 0, df_wk_i$scaled_stream)
#get numerical variables (with no missing values)
numeriques<-which(sapply(df_wk_i,is.numeric))
numeriques
df_wk_num<-df_wk_i[,numeriques]
sapply(df_wk_num,class)
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Views", "Stream", "Likes", "Comments"))]
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num)
print(pc1)
pc1$sdev
inerProj<- pc1$sdev^2
inerProj
totalIner<- sum(inerProj)
totalIner
pinerEix<- 100*inerProj/totalIner
pinerEix #percentage of represented data (NOT REALLY GOOD)
barplot(pinerEix)
PCA(df_wk_num)
FactoMineR::PCA(df_wk_num)
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num)
print(pc1)
pc1$sdev
inerProj<- pc1$sdev^2
inerProj
totalIner<- sum(inerProj)
totalIner
pinerEix<- 100*inerProj/totalIner
pinerEix #percentage of represented data (NOT REALLY GOOD)
barplot(pinerEix)
setwd("C:/MDS/MVA/Project/report/")
df_wk_i <- readRDS("../preprocessing.Rdata")
df_wk_i$scaled_views <- ifelse(df_wk_i$scaled_views %>% is.infinite, 0, df_wk_i$scaled_views)
df_wk_i$scaled_likes <- ifelse(df_wk_i$scaled_likes %>% is.infinite, 0, df_wk_i$scaled_likes)
df_wk_i$scaled_comments <- ifelse(df_wk_i$scaled_comments %>% is.infinite, 0, df_wk_i$scaled_comments)
df_wk_i$scaled_stream <- ifelse(df_wk_i$scaled_stream %>% is.infinite, 0, df_wk_i$scaled_stream)
#get numerical variables (with no missing values)
numeriques<-which(sapply(df_wk_i,is.numeric))
numeriques
df_wk_num<-df_wk_i[,numeriques]
sapply(df_wk_num,class)
#remove scaled, because they have infinite values
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Views", "Stream", "Likes", "Comments"))]
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num)
print(pc1)
FactoMineR::PCA(df_wk_num)
pc1
pc <- FactoMineR::PCA(df_wk_num)
pc
pc$eig
df_wk_num
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Acousticness","Speechiness","Views", "Stream", "Likes", "Comments"))]
df_wk_num
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num)
print(pc1)
pc <- FactoMineR::PCA(df_wk_num)
pc$eig
View(df_wk_i)
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Instrumenetalness","Speechiness","Views", "Stream", "Likes", "Comments"))]
df_wk_num
setwd("C:/MDS/MVA/Project/report/")
df_wk_i <- readRDS("../preprocessing.Rdata")
df_wk_i$scaled_views <- ifelse(df_wk_i$scaled_views %>% is.infinite, 0, df_wk_i$scaled_views)
df_wk_i$scaled_likes <- ifelse(df_wk_i$scaled_likes %>% is.infinite, 0, df_wk_i$scaled_likes)
df_wk_i$scaled_comments <- ifelse(df_wk_i$scaled_comments %>% is.infinite, 0, df_wk_i$scaled_comments)
df_wk_i$scaled_stream <- ifelse(df_wk_i$scaled_stream %>% is.infinite, 0, df_wk_i$scaled_stream)
#get numerical variables (with no missing values)
numeriques<-which(sapply(df_wk_i,is.numeric))
numeriques
df_wk_num<-df_wk_i[,numeriques]
sapply(df_wk_num,class)
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Instrumenetalness","Speechiness","Views", "Stream", "Likes", "Comments"))]
df_wk_num
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num)
print(pc1)
pc <- FactoMineR::PCA(df_wk_num)
pc$eig
setwd("C:/MDS/MVA/Project/report/")
df_wk_i <- readRDS("../preprocessing.Rdata")
df_wk_i$scaled_views <- ifelse(df_wk_i$scaled_views %>% is.infinite, 0, df_wk_i$scaled_views)
df_wk_i$scaled_likes <- ifelse(df_wk_i$scaled_likes %>% is.infinite, 0, df_wk_i$scaled_likes)
df_wk_i$scaled_comments <- ifelse(df_wk_i$scaled_comments %>% is.infinite, 0, df_wk_i$scaled_comments)
df_wk_i$scaled_stream <- ifelse(df_wk_i$scaled_stream %>% is.infinite, 0, df_wk_i$scaled_stream)
#get numerical variables (with no missing values)
numeriques<-which(sapply(df_wk_i,is.numeric))
numeriques
df_wk_num<-df_wk_i[,numeriques]
sapply(df_wk_num,class)
#remove scaled, because they have infinite values
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Instrumentalness","Speechiness","Views", "Stream", "Likes", "Comments"))]
df_wk_num
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num)
print(pc1)
pc <- FactoMineR::PCA(df_wk_num)
pc$eig
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num)
print(pc1)
pc1$sdev
inerProj<- pc1$sdev^2
inerProj
totalIner<- sum(inerProj)
totalIner
inerProj
totalIner
pinerEix #percentage of represented data (NOT REALLY GOOD)
pinerEix<- 100*inerProj/totalIner
pinerEix #percentage of represented data (NOT REALLY GOOD)
inerProj
totalIner
inerProj
inerProj
pc1$sdev
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num, scale. = TRUE)
print(pc1)
pc <- FactoMineR::PCA(df_wk_num)
pc$eig
pc1
pc1$sdev
inerProj<- pc1$sdev^2
inerProj
totalIner<- sum(inerProj)
totalIner
pinerEix<- 100*inerProj/totalIner
pinerEix #percentage of represented data (NOT REALLY GOOD)
barplot(pinerEix)
#Cummulated Inertia in subspaces, from first principal component to the 11th dimension subspace
barplot(100*cumsum(pc1$sdev[1:dim(df_wk_num)[2]]^2)/dim(df_wk_num)[2])
percInerAccum<-100*cumsum(pc1$sdev[1:dim(df_wk_num)[2]]^2)/dim(df_wk_num)[2]
percInerAccum
nd = 8
nd = 6
Psi = pc1$x[,1:nd]
dim(Psi)
Psi[2000,]
iden = row.names(df_wk_num)
etiq = names(df_wk_num)
ze = rep(0,length(etiq)) # WE WILL NEED THIS VECTOR AFTERWARDS FOR THE GRAPHICS
#select your axis
#eje1<-2
eje1<-1
#eje2<-3
eje2<-2
plot(Psi[,eje1],Psi[,eje2], type="n")
text(Psi[,eje1],Psi[,eje2],labels=iden, cex=0.5)
axis(side=1, pos= 0, labels = F, col="cyan")
axis(side=3, pos= 0, labels = F, col="cyan")
axis(side=2, pos= 0, labels = F, col="cyan")
axis(side=4, pos= 0, labels = F, col="cyan")
Phi = cor(df_wk_num,Psi) #correlation between principal components and numerical
View(Phi)
X<-Phi[,eje1]
Y<-Phi[,eje2]
plot(Psi[,eje1],Psi[,eje2],type="n",xlim=c(min(X,0),max(X,0)), ylim=c(-1,1))
axis(side=1, pos= 0, labels = F)
axis(side=3, pos= 0, labels = F)
axis(side=2, pos= 0, labels = F)
axis(side=4, pos= 0, labels = F)
arrows(ze, ze, X, Y, length = 0.07,col="blue")
text(X,Y,labels=etiq,col="darkblue", cex=0.7)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
setwd("C:/MDS/MVA/Project/report/")
df_wk_i <- readRDS("../preprocessing.Rdata")
df_wk_i$scaled_views <- ifelse(df_wk_i$scaled_views %>% is.infinite, 0, df_wk_i$scaled_views)
df_wk_i$scaled_likes <- ifelse(df_wk_i$scaled_likes %>% is.infinite, 0, df_wk_i$scaled_likes)
df_wk_i$scaled_comments <- ifelse(df_wk_i$scaled_comments %>% is.infinite, 0, df_wk_i$scaled_comments)
df_wk_i$scaled_stream <- ifelse(df_wk_i$scaled_stream %>% is.infinite, 0, df_wk_i$scaled_stream)
#get numerical variables (with no missing values)
numeriques<-which(sapply(df_wk_i,is.numeric))
numeriques
df_wk_num<-df_wk_i[,numeriques]
sapply(df_wk_num,class)
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Instrumentalness","Speechiness","Views", "Stream", "Likes", "Comments"))]
df_wk_num
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num, scale. = TRUE)
autoplot(pc1, data = df_wk_num,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3)
autoplot(pc1, data = df_wk_num,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.1)
autoplot(pc1,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.1)
autoplot(pc1,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.0001)
autoplot(pc1,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.0001) + theme_minimal()
View(df_wk_num)
autoplot(pc1,data=df_wk_i, colour=''
loadings = TRUE, loadings.colour = 'blue',
autoplot(pc1,data=df_wk_i,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.0001) + theme_minimal()
View(df_wk_i)
autoplot(pc1,data=df_wk_i,colour='instrumentalness_band'
loadings = TRUE, loadings.colour = 'blue',
autoplot(pc1,data=df_wk_i,colour='instrumentalness_band',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.0001) + theme_minimal()
autoplot(pc1,data=df_wk_i,colour='instrumental_band',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.0001) + theme_minimal()
autoplot(pc1,data=df_wk_i,colour='instrumental_band',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.01) + theme_minimal()
autoplot(pc1,data=df_wk_i,colour='instrumental_band',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.1) + theme_minimal()
autoplot(pc1,data=df_wk_i,colour='instrumental_band',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.6) + theme_minimal()
# Create your PCA plot as before
pca_plot <- autoplot(pc1, data = df_wk_i, colour = 'instrumental_band',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha = 0.6) + theme_minimal()
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- df_wk_i %>%
group_by(category_variable) %>%
summarize(centroid_x = mean(PC1), centroid_y = mean(PC2))  # Use PC1 and PC2 as the principal components
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- df_wk_i %>%
group_by("instrumental_band") %>%
summarize(centroid_x = mean(PC1), centroid_y = mean(PC2))  # Use PC1 and PC2 as the principal components
pc1
pc1$rotation
pc1$rotation[1]
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- df_wk_i %>%
group_by("instrumental_band") %>%
summarize(centroid_x = mean(pc1$rotation[1]), centroid_y = mean(pc1$rotation[2]))  # Use PC1 and PC2 as the principal components
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y), color = 'red', size = 3)
# Create your PCA plot as before
pca_plot <- autoplot(pc1, data = df_wk_i, colour = 'instrumental_band',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha = 0.0001) + theme_minimal()
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- df_wk_i %>%
group_by("instrumental_band") %>%
summarize(centroid_x = mean(pc1$rotation[1]), centroid_y = mean(pc1$rotation[2]))  # Use PC1 and PC2 as the principal components
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y), color = 'red', size = 3)
pc1$rotation
pc1$rotation[1]
pc1$rotation
pc1$rotation[,1]
pc1$rotation[1,]
pc1
pc1$x
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- df_wk_i %>%
group_by("instrumental_band") %>%
summarize(centroid_x = mean(pc1$x[1,]), centroid_y = mean(pc1$x[2]))  # Use PC1 and PC2 as the principal components
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y), color = 'red', size = 3)
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- df_wk_i %>%
group_by("instrumental_band") %>%
summarize(centroid_x = mean(pc1$x[1]), centroid_y = mean(pc1$x[2]))  # Use PC1 and PC2 as the principal components
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y), color = 'red', size = 3)
pc1$x
pc1$x[1]
pca_df <- pc1$x
pca_df
pca_df <- pc1$x %>% as.data.frame
pca_df
pca_df <- cbind(pca_df, df_wk_i) %>% as.data.frame
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- pca_df %>%
group_by("instrumental_band") %>%
summarize(centroid_x = mean(pca_df$PC1), centroid_y = mean(pca_df$PC2))  # Use PC1 and PC2 as the principal components
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y), color = 'red', size = 3)
centroids
pca_df
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- pca_df %>%
group_by(instrumental_band) %>%
summarize(centroid_x = mean(pca_df$PC1), centroid_y = mean(pca_df$PC2))  # Use PC1 and PC2 as the principal components
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y), color = 'instrumen', size = 3)
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- pca_df %>%
group_by(instrumental_band) %>%
summarize(centroid_x = mean(pca_df$PC1), centroid_y = mean(pca_df$PC2))  # Use PC1 and PC2 as the principal components
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y), color = 'instrumen', size = 3)
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y), color = 'instrumental_band', size = 3)
centroids
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y),size = 3)
library(ggfortify)
setwd("C:/MDS/MVA/Project/report/")
df_wk_i <- readRDS("../preprocessing.Rdata")
df_wk_i$scaled_views <- ifelse(df_wk_i$scaled_views %>% is.infinite, 0, df_wk_i$scaled_views)
df_wk_i$scaled_likes <- ifelse(df_wk_i$scaled_likes %>% is.infinite, 0, df_wk_i$scaled_likes)
df_wk_i$scaled_comments <- ifelse(df_wk_i$scaled_comments %>% is.infinite, 0, df_wk_i$scaled_comments)
df_wk_i$scaled_stream <- ifelse(df_wk_i$scaled_stream %>% is.infinite, 0, df_wk_i$scaled_stream)
#get numerical variables (with no missing values)
numeriques<-which(sapply(df_wk_i,is.numeric))
numeriques
df_wk_num<-df_wk_i[,numeriques]
sapply(df_wk_num,class)
#remove scaled, because they have infinite values
df_wk_num <- df_wk_num[, !(names(df_wk_num) %in% c("Instrumentalness","Speechiness","Views", "Stream", "Likes", "Comments"))]
df_wk_num
# PRINCIPAL COMPONENT ANALYSIS
pc1 <- prcomp(df_wk_num, scale. = TRUE)
autoplot(pc1,data=df_wk_i,colour='instrumental_band',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha=0.6) + theme_minimal()
print(pc1)
pc <- FactoMineR::PCA(df_wk_num)
pc$eig
pc1$x
# Create your PCA plot as before
pca_plot <- autoplot(pc1, data = df_wk_i, colour = 'instrumental_band',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, alpha = 0.0001) + theme_minimal()
pca_df <- pc1$x %>% as.data.frame
pca_df <- cbind(pca_df, df_wk_i) %>% as.data.frame
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- pca_df %>%
group_by(instrumental_band) %>%
summarize(centroid_x = mean(pca_df$PC1), centroid_y = mean(pca_df$PC2))  # Use PC1 and PC2 as the principal components
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y),size = 3)
centroids
pca_df
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- pca_df %>%
group_by(instrumental_band) %>%
summarize(centroid_x = mean(pca_df$PC1), centroid_y = mean(pca_df$PC2))  # Use PC1 and PC2 as the principal components
# Add centroids to the PCA plot
pca_plot + geom_point(data = centroids, aes(x = centroid_x, y = centroid_y),size = 3)
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- pca_df %>%
group_by(instrumental_band) %>%
summarize(centroid_x = mean(pca_df$PC1), centroid_y = mean(pca_df$PC2))  # Use PC1 and PC2 as the principal components
centroids
# Calculate centroids for the categorical variable (e.g., 'category_variable')
centroids <- pca_df %>%
group_by(official_video) %>%
summarize(centroid_x = mean(pca_df$PC1), centroid_y = mean(pca_df$PC2))  # Use PC1 and PC2 as the principal components
centroids
mean(pca_df$PC1)
